package services

import (
    "context"
    "errors"
    "fmt"
    "strconv"

    "paydeya-backend/internal/models"
    "paydeya-backend/internal/repositories"
    "paydeya-backend/internal/utils"

    "golang.org/x/crypto/bcrypt"
    "github.com/golang-jwt/jwt/v5"
)

type AuthService struct {
    userRepo  *repositories.UserRepository
    jwtSecret string
}

func NewAuthService(userRepo *repositories.UserRepository, jwtSecret string) *AuthService {
    return &AuthService{
        userRepo: userRepo,
        jwtSecret: jwtSecret,
    }
}

// Register —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *AuthService) Register(ctx context.Context, req *models.RegisterRequest) (*models.User, error) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ email
    exists, err := s.userRepo.EmailExists(ctx, req.Email)
    if err != nil {
        return nil, fmt.Errorf("error checking email: %w", err)
    }
    if exists {
        return nil, errors.New("user with this email already exists")
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    hashedPassword, err := bcrypt.GenerateFromPassword([]byte(req.Password), bcrypt.DefaultCost)
    if err != nil {
        return nil, fmt.Errorf("error hashing password: %w", err)
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user := &models.User{
        Email:        req.Email,
        PasswordHash: string(hashedPassword),
        FullName:     req.FullName,
        Role:         req.Role,
        IsVerified:   req.Role == "student", // –£—á–µ–Ω–∏–∫–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    if err := s.userRepo.CreateUser(ctx, user); err != nil {
        return nil, fmt.Errorf("error creating user: %w", err)
    }

    return user, nil
}

// Login –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *AuthService) Login(ctx context.Context, req *models.LoginRequest) (*models.User, error) {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    user, err := s.userRepo.GetUserByEmail(ctx, req.Email)
    if err != nil {
        return nil, fmt.Errorf("error finding user: %w", err)
    }
    if user == nil {
        return nil, errors.New("invalid email or password")
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    if err := bcrypt.CompareHashAndPassword([]byte(user.PasswordHash), []byte(req.Password)); err != nil {
        return nil, errors.New("invalid email or password")
    }

    return user, nil
}

// GenerateTokens —Å–æ–∑–¥–∞–µ—Ç access –∏ refresh —Ç–æ–∫–µ–Ω—ã
func (s *AuthService) GenerateTokens(user *models.User) (string, string, error) {
    accessToken, err := utils.GenerateAccessToken(user.ID, user.Email, user.Role, s.jwtSecret)
    if err != nil {
        return "", "", fmt.Errorf("error generating access token: %w", err)
    }

    refreshToken, err := utils.GenerateRefreshToken(user.ID, s.jwtSecret)
    if err != nil {
        return "", "", fmt.Errorf("error generating refresh token: %w", err)
    }

    return accessToken, refreshToken, nil
}

// ValidateToken –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω
func (s *AuthService) ValidateToken(tokenString string) (*utils.Claims, error) {
    return utils.ValidateToken(tokenString, s.jwtSecret)
}

// RefreshTokens –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã
func (s *AuthService) RefreshTokens(refreshToken string) (string, string, error) {
    token, err := jwt.ParseWithClaims(refreshToken, &jwt.RegisteredClaims{}, func(token *jwt.Token) (interface{}, error) {
        return []byte(s.jwtSecret), nil
    })

    if err != nil || !token.Valid {
        return "", "", errors.New("invalid refresh token")
    }

    claims, ok := token.Claims.(*jwt.RegisteredClaims)
    if !ok {
        return "", "", errors.New("invalid token claims")
    }

    // –ü–æ–ª—É—á–∞–µ–º userID –∏–∑ subject
    userIDStr := claims.Subject
    userID, err := strconv.Atoi(userIDStr)
    if err != nil {
        return "", "", errors.New("invalid user ID in token")
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user, err := s.userRepo.GetUserByID(context.Background(), userID)
    if err != nil || user == nil {
        return "", "", errors.New("user not found")
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
    return s.GenerateTokens(user)
}

// ForgotPassword - –æ—Ç–ø—Ä–∞–≤–∫–∞ email —Å —Ç–æ–∫–µ–Ω–æ–º —Å–±—Ä–æ—Å–∞
func (s *AuthService) ForgotPassword(ctx context.Context, email string) error {
    // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –±—ã email
    fmt.Printf("üìß Password reset requested for: %s\n", email)
    fmt.Printf("üîó Reset token: reset-token-%s\n", email) // –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    return nil
}

// ResetPassword - —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
func (s *AuthService) ResetPassword(ctx context.Context, token, newPassword string) error {
    // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –±—ã —Ç–æ–∫–µ–Ω –≤ –ë–î
    fmt.Printf("üîÑ Password reset with token: %s\n", token)

    // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    hashedPassword, err := bcrypt.GenerateFromPassword([]byte(newPassword), bcrypt.DefaultCost)
    if err != nil {
        return fmt.Errorf("error hashing password: %w", err)
    }

    fmt.Printf("‚úÖ New password hash: %s\n", string(hashedPassword))
    return nil
}